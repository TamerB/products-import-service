// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/TamerB/products-import-service/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/TamerB/products-import-service/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCountry mocks base method.
func (m *MockStore) CreateCountry(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCountry", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCountry indicates an expected call of CreateCountry.
func (mr *MockStoreMockRecorder) CreateCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCountry", reflect.TypeOf((*MockStore)(nil).CreateCountry), arg0, arg1)
}

// CreateOrUpdateCountry mocks base method.
func (m *MockStore) CreateOrUpdateCountry(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateCountry", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateCountry indicates an expected call of CreateOrUpdateCountry.
func (mr *MockStoreMockRecorder) CreateOrUpdateCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCountry", reflect.TypeOf((*MockStore)(nil).CreateOrUpdateCountry), arg0, arg1)
}

// CreateOrUpdateProduct mocks base method.
func (m *MockStore) CreateOrUpdateProduct(arg0 context.Context, arg1 db.CreateOrUpdateProductParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateProduct indicates an expected call of CreateOrUpdateProduct.
func (mr *MockStoreMockRecorder) CreateOrUpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateProduct", reflect.TypeOf((*MockStore)(nil).CreateOrUpdateProduct), arg0, arg1)
}

// CreateOrUpdateStock mocks base method.
func (m *MockStore) CreateOrUpdateStock(arg0 context.Context, arg1 db.CreateOrUpdateStockParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateStock", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateStock indicates an expected call of CreateOrUpdateStock.
func (mr *MockStoreMockRecorder) CreateOrUpdateStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateStock", reflect.TypeOf((*MockStore)(nil).CreateOrUpdateStock), arg0, arg1)
}

// CreateOrUpdateStockTx mocks base method.
func (m *MockStore) CreateOrUpdateStockTx(arg0 context.Context, arg1 db.UpdateStockTxParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateStockTx", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateStockTx indicates an expected call of CreateOrUpdateStockTx.
func (mr *MockStoreMockRecorder) CreateOrUpdateStockTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateStockTx", reflect.TypeOf((*MockStore)(nil).CreateOrUpdateStockTx), arg0, arg1)
}

// CreateStock mocks base method.
func (m *MockStore) CreateStock(arg0 context.Context, arg1 db.CreateStockParams) (db.CreateStockRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStock", arg0, arg1)
	ret0, _ := ret[0].(db.CreateStockRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStock indicates an expected call of CreateStock.
func (mr *MockStoreMockRecorder) CreateStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStock", reflect.TypeOf((*MockStore)(nil).CreateStock), arg0, arg1)
}

// GetCountryForUpdate mocks base method.
func (m *MockStore) GetCountryForUpdate(arg0 context.Context, arg1 string) (db.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountryForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountryForUpdate indicates an expected call of GetCountryForUpdate.
func (mr *MockStoreMockRecorder) GetCountryForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountryForUpdate", reflect.TypeOf((*MockStore)(nil).GetCountryForUpdate), arg0, arg1)
}

// GetProductForUpdate mocks base method.
func (m *MockStore) GetProductForUpdate(arg0 context.Context, arg1 string) (db.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductForUpdate indicates an expected call of GetProductForUpdate.
func (mr *MockStoreMockRecorder) GetProductForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductForUpdate", reflect.TypeOf((*MockStore)(nil).GetProductForUpdate), arg0, arg1)
}

// GetStockByProductAndCountryeForUpdate mocks base method.
func (m *MockStore) GetStockByProductAndCountryeForUpdate(arg0 context.Context, arg1 db.GetStockByProductAndCountryeForUpdateParams) (db.GetStockByProductAndCountryeForUpdateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStockByProductAndCountryeForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.GetStockByProductAndCountryeForUpdateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStockByProductAndCountryeForUpdate indicates an expected call of GetStockByProductAndCountryeForUpdate.
func (mr *MockStoreMockRecorder) GetStockByProductAndCountryeForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStockByProductAndCountryeForUpdate", reflect.TypeOf((*MockStore)(nil).GetStockByProductAndCountryeForUpdate), arg0, arg1)
}

// UpdateCountry mocks base method.
func (m *MockStore) UpdateCountry(arg0 context.Context, arg1 db.UpdateCountryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCountry", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCountry indicates an expected call of UpdateCountry.
func (mr *MockStoreMockRecorder) UpdateCountry(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCountry", reflect.TypeOf((*MockStore)(nil).UpdateCountry), arg0, arg1)
}

// UpdateProduct mocks base method.
func (m *MockStore) UpdateProduct(arg0 context.Context, arg1 db.UpdateProductParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockStoreMockRecorder) UpdateProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockStore)(nil).UpdateProduct), arg0, arg1)
}

// UpdateStock mocks base method.
func (m *MockStore) UpdateStock(arg0 context.Context, arg1 db.UpdateStockParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStock indicates an expected call of UpdateStock.
func (mr *MockStoreMockRecorder) UpdateStock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStock", reflect.TypeOf((*MockStore)(nil).UpdateStock), arg0, arg1)
}
