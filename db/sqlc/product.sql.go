// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: product.sql

package db

import (
	"context"
)

const createOrUpdateProduct = `-- name: CreateOrUpdateProduct :one
INSERT INTO products (sku, name) 
VALUES ($1, $2)
ON CONFLICT (sku) DO UPDATE 
SET name = $2
RETURNING id
`

type CreateOrUpdateProductParams struct {
	Sku  string `json:"sku"`
	Name string `json:"name"`
}

func (q *Queries) CreateOrUpdateProduct(ctx context.Context, arg CreateOrUpdateProductParams) (int64, error) {
	row := q.queryRow(ctx, q.createOrUpdateProductStmt, createOrUpdateProduct, arg.Sku, arg.Name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT id, sku, name, created_at, updated_at 
FROM products
WHERE sku = $1
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetProductForUpdate(ctx context.Context, sku string) (Product, error) {
	row := q.queryRow(ctx, q.getProductForUpdateStmt, getProductForUpdate, sku)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Sku,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET name = $1
WHERE id = $2
`

type UpdateProductParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.exec(ctx, q.updateProductStmt, updateProduct, arg.Name, arg.ID)
	return err
}
