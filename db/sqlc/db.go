// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createCountryStmt, err = db.PrepareContext(ctx, createCountry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCountry: %w", err)
	}
	if q.createOrUpdateCountryStmt, err = db.PrepareContext(ctx, createOrUpdateCountry); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrUpdateCountry: %w", err)
	}
	if q.createOrUpdateProductStmt, err = db.PrepareContext(ctx, createOrUpdateProduct); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrUpdateProduct: %w", err)
	}
	if q.createOrUpdateStockStmt, err = db.PrepareContext(ctx, createOrUpdateStock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateOrUpdateStock: %w", err)
	}
	if q.createStockStmt, err = db.PrepareContext(ctx, createStock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStock: %w", err)
	}
	if q.getCountryForUpdateStmt, err = db.PrepareContext(ctx, getCountryForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetCountryForUpdate: %w", err)
	}
	if q.getProductForUpdateStmt, err = db.PrepareContext(ctx, getProductForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetProductForUpdate: %w", err)
	}
	if q.getStockByProductAndCountryeForUpdateStmt, err = db.PrepareContext(ctx, getStockByProductAndCountryeForUpdate); err != nil {
		return nil, fmt.Errorf("error preparing query GetStockByProductAndCountryeForUpdate: %w", err)
	}
	if q.updateCountryStmt, err = db.PrepareContext(ctx, updateCountry); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCountry: %w", err)
	}
	if q.updateProductStmt, err = db.PrepareContext(ctx, updateProduct); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateProduct: %w", err)
	}
	if q.updateStockStmt, err = db.PrepareContext(ctx, updateStock); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStock: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createCountryStmt != nil {
		if cerr := q.createCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCountryStmt: %w", cerr)
		}
	}
	if q.createOrUpdateCountryStmt != nil {
		if cerr := q.createOrUpdateCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrUpdateCountryStmt: %w", cerr)
		}
	}
	if q.createOrUpdateProductStmt != nil {
		if cerr := q.createOrUpdateProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrUpdateProductStmt: %w", cerr)
		}
	}
	if q.createOrUpdateStockStmt != nil {
		if cerr := q.createOrUpdateStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createOrUpdateStockStmt: %w", cerr)
		}
	}
	if q.createStockStmt != nil {
		if cerr := q.createStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStockStmt: %w", cerr)
		}
	}
	if q.getCountryForUpdateStmt != nil {
		if cerr := q.getCountryForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCountryForUpdateStmt: %w", cerr)
		}
	}
	if q.getProductForUpdateStmt != nil {
		if cerr := q.getProductForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getProductForUpdateStmt: %w", cerr)
		}
	}
	if q.getStockByProductAndCountryeForUpdateStmt != nil {
		if cerr := q.getStockByProductAndCountryeForUpdateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStockByProductAndCountryeForUpdateStmt: %w", cerr)
		}
	}
	if q.updateCountryStmt != nil {
		if cerr := q.updateCountryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCountryStmt: %w", cerr)
		}
	}
	if q.updateProductStmt != nil {
		if cerr := q.updateProductStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateProductStmt: %w", cerr)
		}
	}
	if q.updateStockStmt != nil {
		if cerr := q.updateStockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStockStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                        DBTX
	tx                                        *sql.Tx
	createCountryStmt                         *sql.Stmt
	createOrUpdateCountryStmt                 *sql.Stmt
	createOrUpdateProductStmt                 *sql.Stmt
	createOrUpdateStockStmt                   *sql.Stmt
	createStockStmt                           *sql.Stmt
	getCountryForUpdateStmt                   *sql.Stmt
	getProductForUpdateStmt                   *sql.Stmt
	getStockByProductAndCountryeForUpdateStmt *sql.Stmt
	updateCountryStmt                         *sql.Stmt
	updateProductStmt                         *sql.Stmt
	updateStockStmt                           *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                        tx,
		tx:                        tx,
		createCountryStmt:         q.createCountryStmt,
		createOrUpdateCountryStmt: q.createOrUpdateCountryStmt,
		createOrUpdateProductStmt: q.createOrUpdateProductStmt,
		createOrUpdateStockStmt:   q.createOrUpdateStockStmt,
		createStockStmt:           q.createStockStmt,
		getCountryForUpdateStmt:   q.getCountryForUpdateStmt,
		getProductForUpdateStmt:   q.getProductForUpdateStmt,
		getStockByProductAndCountryeForUpdateStmt: q.getStockByProductAndCountryeForUpdateStmt,
		updateCountryStmt:                         q.updateCountryStmt,
		updateProductStmt:                         q.updateProductStmt,
		updateStockStmt:                           q.updateStockStmt,
	}
}
