// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: country.sql

package db

import (
	"context"
)

const createCountry = `-- name: CreateCountry :one
INSERT INTO countries (country_code) 
VALUES ($1)
RETURNING id
`

func (q *Queries) CreateCountry(ctx context.Context, countryCode string) (int64, error) {
	row := q.queryRow(ctx, q.createCountryStmt, createCountry, countryCode)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createOrUpdateCountry = `-- name: CreateOrUpdateCountry :one
INSERT INTO countries (country_code) 
VALUES ($1)
ON CONFLICT (country_code) DO UPDATE 
SET country_code = $1
RETURNING id
`

func (q *Queries) CreateOrUpdateCountry(ctx context.Context, countryCode string) (int64, error) {
	row := q.queryRow(ctx, q.createOrUpdateCountryStmt, createOrUpdateCountry, countryCode)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCountryForUpdate = `-- name: GetCountryForUpdate :one
SELECT id, country_code, created_at, updated_at 
FROM countries
WHERE country_code = $1
LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetCountryForUpdate(ctx context.Context, countryCode string) (Country, error) {
	row := q.queryRow(ctx, q.getCountryForUpdateStmt, getCountryForUpdate, countryCode)
	var i Country
	err := row.Scan(
		&i.ID,
		&i.CountryCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCountry = `-- name: UpdateCountry :exec
UPDATE countries
SET country_code = $1
WHERE id = $2
`

type UpdateCountryParams struct {
	CountryCode string `json:"country_code"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateCountry(ctx context.Context, arg UpdateCountryParams) error {
	_, err := q.exec(ctx, q.updateCountryStmt, updateCountry, arg.CountryCode, arg.ID)
	return err
}
